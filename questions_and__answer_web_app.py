# -*- coding: utf-8 -*-
"""Questions_and_ Answer_Web_App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yE89DLoEdZLYXKKR96yErxYATijzC1nz

<h1 QUESTIONS AND ANSWER WEB APP PROJECT

<h1>QUESTIONS AND ANSWER WEB APP PROJECT</h1>

<h2>Import Libraries</h2>
"""

import numpy as np
from transformers import pipeline
import torch
import gradio as gr
from IPython.display import Markdown, display

"""<h2>Initiate Pipeline</h2>"""

model_id = "distilbert/distilbert-base-cased-distilled-squad"
qa_pipeline = pipeline("question-answering", model=model_id)

#TEST THE qa_pipeline
Context = "The Amazon rainforest is the largest tropical rainforest in the world, spanning over 5.5 million square kilometers. It is home to an incredible diversity of wildlife, including jaguars, sloths, and hundreds of species of birds. The Amazon River, which runs through the forest, is the second-longest river in the world and plays a crucial role in the ecosystem. Deforestation and climate change pose significant threats to this rainforest, affecting both biodiversity and indigenous communities."
Question = "Which river flows through the Amazon rainforest?"
result = qa_pipeline(context=Context, question=Question)
print(f"Quesion: {Question}")
print(f"Answer: {result['answer']}")
print(f"Score: {result['score']*100:.2f}%")

"""<h3>Define two Functions for the input</h3>"""

# Single Interactive Question function
def single_inetractive_question(context, question):
  '''
  accept a single question and context and return the answer
  '''
  result = qa_pipeline(context=context, question=question)
  answer = result['answer']
  confidence = f"{round(result['score']*100, 2)}%"
  highlighted = context.replace(answer, f"**{answer}**")
  return answer, confidence, highlighted

#MULTIPLE INPUT QUESTIONS FUNCTION
def multiple_interaction_questions(context, question):
  '''
  accept list of questions and context and return the answers
  '''
  answers = []

  questions = [q.strip() for q in question.strip().split("\n") if q.strip() != ""]
  for question in questions:
    result = qa_pipeline(context=context, question=question)
    answers.append(f"\nQuestion:\n {question}\nAnswer:\n {result['answer']}\nConfidence:\n {round(result['score']*100, 2)}%\n-------------------")
  return "".join(answers)

"""<h2>SETTING UP GRADIO INTERFACE</h2>"""

single_inetractive_question(context=Context, question=Question)

new_questions = '''What is the size of the Amazon rainforest?

Which animals live in the Amazon rainforest?

What role does the Amazon River play in the ecosystem?

What are the main threats to the Amazon rainforest?
'''

multiple_interaction_questions(context=Context, question=new_questions)

App_code = """with gr.Blocks() as app:
    gr.Markdown("# ðŸ“– Question Answering Web App")
    gr.Markdown(
        "Paste a paragraph (context) and ask one or multiple questions.\n\n"
        "âœ… Interactive questions â†’ get answers one-by-one\n"
        "âœ… Batch questions â†’ enter multiple questions separated by newlines"
    )

    # Input: context
    context_input = gr.Textbox(label="Context", lines=6, placeholder="Paste your context paragraph here...")

    # ----- Interactive QA -----
    gr.Markdown("## ðŸ¤– Interactive QA (One Question at a Time)")
    question_input = gr.Textbox(label="Question", placeholder="Ask a question about the context...")
    answer_output = gr.Textbox(label="Answer")
    confidence_output = gr.Textbox(label="Confidence Score")
    highlighted_output = gr.Textbox(label="Context with Highlighted Answer")

    interactive_btn = gr.Button("Get Answer")
    interactive_btn.click(
        single_inetractive_question,
        inputs=[context_input, question_input],
        outputs=[answer_output, confidence_output, highlighted_output]
    )

    # ----- Batch QA -----
    gr.Markdown("## ðŸ“„ Batch QA (Multiple Questions at Once)")
    batch_questions_input = gr.Textbox(label="Questions (one per line)", lines=5, placeholder="Enter multiple questions, each on a new line")
    batch_output = gr.Textbox(label="Answers")
    batch_btn = gr.Button("Get Batch Answers")
    batch_btn.click(multiple_interaction_questions, inputs=[context_input, batch_questions_input], outputs=batch_output)

# Launch app
app.launch()
"""
with open("app.py", "w") as f:
  f.write(App_code)

with gr.Blocks() as app:
    gr.Markdown("# ðŸ“– Question Answering Web App")
    gr.Markdown(
        "Paste a paragraph (context) and ask one or multiple questions.\n\n"
        "âœ… Interactive questions â†’ get answers one-by-one\n"
        "âœ… Batch questions â†’ enter multiple questions separated by newlines"
    )

    # Input: context
    context_input = gr.Textbox(label="Context", lines=6, placeholder="Paste your context paragraph here...")

    # ----- Interactive QA -----
    gr.Markdown("## ðŸ¤– Interactive QA (One Question at a Time)")
    question_input = gr.Textbox(label="Question", placeholder="Ask a question about the context...")
    answer_output = gr.Textbox(label="Answer")
    confidence_output = gr.Textbox(label="Confidence Score")
    highlighted_output = gr.Textbox(label="Context with Highlighted Answer")

    interactive_btn = gr.Button("Get Answer")
    interactive_btn.click(
        single_inetractive_question,
        inputs=[context_input, question_input],
        outputs=[answer_output, confidence_output, highlighted_output]
    )

    # ----- Batch QA -----
    gr.Markdown("## ðŸ“„ Batch QA (Multiple Questions at Once)")
    batch_questions_input = gr.Textbox(label="Questions (one per line)", lines=5, placeholder="Enter multiple questions, each on a new line")
    batch_output = gr.Textbox(label="Answers")
    batch_btn = gr.Button("Get Batch Answers")
    batch_btn.click(multiple_interaction_questions, inputs=[context_input, batch_questions_input], outputs=batch_output)

# Launch app
app.launch()

